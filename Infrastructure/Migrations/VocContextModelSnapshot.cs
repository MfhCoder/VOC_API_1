// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(VocContext))]
    partial class VocContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Core.Entities.DeliveryLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LongUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryLinks");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Core.Entities.Escalation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Escalations");
                });

            modelBuilder.Entity("Core.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SubmittedBy")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("SubmittedBy");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Core.Entities.FeedbackAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FeedbackId")
                        .HasColumnType("integer");

                    b.Property<int?>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseText")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<float?>("SentimentScore")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("FeedbackAnswers");
                });

            modelBuilder.Entity("Core.Entities.FeedbackTag", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FeedbackTags");
                });

            modelBuilder.Entity("Core.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastEscalation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFeedback")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSurvey")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastTicket")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastTransaction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ledger")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("License")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MerchantSettlementBank")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PosMcc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Product")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tenure")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("TenureInDays")
                        .HasColumnType("integer");

                    b.Property<int?>("TerminalCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TransactionCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Core.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Core.Entities.QuestionBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ParentQuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TriggerOptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentQuestionId");

                    b.HasIndex("TriggerOptionId");

                    b.ToTable("QuestionBranches");
                });

            modelBuilder.Entity("Core.Entities.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsTerminate")
                        .HasColumnType("boolean");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<bool>("TriggersBranch")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Core.Entities.QuestionSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SectionOrder")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("QuestionSections");
                });

            modelBuilder.Entity("Core.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Core.Entities.SurveyBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("MerchantCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyBatches");
                });

            modelBuilder.Entity("Core.Entities.SurveyDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("LinkId")
                        .HasColumnType("integer");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("LinkId");

                    b.HasIndex("MerchantId");

                    b.ToTable("SurveyDeliveries");
                });

            modelBuilder.Entity("Core.Entities.SurveyFilters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColumnValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyFilters");
                });

            modelBuilder.Entity("Core.Entities.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Entities.Escalation", b =>
                {
                    b.HasOne("Core.Entities.Department", "Department")
                        .WithMany("Escalations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Feedback", "Feedback")
                        .WithMany("Escalations")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Core.Entities.Feedback", b =>
                {
                    b.HasOne("Core.Entities.SurveyDelivery", "Delivery")
                        .WithMany("Feedbacks")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Core.Entities.Merchant", "Merchant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MerchantId");

                    b.HasOne("Core.Entities.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmittedBy");

                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany("FeedbacksSubmitted")
                        .HasForeignKey("UserId");

                    b.Navigation("Delivery");

                    b.Navigation("Merchant");

                    b.Navigation("Submitter");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.FeedbackAnswer", b =>
                {
                    b.HasOne("Core.Entities.Feedback", "Feedback")
                        .WithMany("Answers")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.QuestionOption", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId");

                    b.HasOne("Core.Entities.SurveyQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Entities.FeedbackTag", b =>
                {
                    b.HasOne("Core.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackTags")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany("FeedbackTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.HasOne("Core.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("Permissions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Module");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.QuestionBranch", b =>
                {
                    b.HasOne("Core.Entities.SurveyQuestion", "ParentQuestion")
                        .WithMany("ChildBranches")
                        .HasForeignKey("ParentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.QuestionOption", "TriggerOption")
                        .WithMany("TriggeredBranches")
                        .HasForeignKey("TriggerOptionId");

                    b.Navigation("ParentQuestion");

                    b.Navigation("TriggerOption");
                });

            modelBuilder.Entity("Core.Entities.QuestionOption", b =>
                {
                    b.HasOne("Core.Entities.SurveyQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Entities.QuestionSection", b =>
                {
                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("QuestionSections")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.RolePermission", b =>
                {
                    b.HasOne("Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Survey", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany("SurveysCreated")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Core.Entities.SurveyBatch", b =>
                {
                    b.HasOne("Core.Entities.Channel", "Channel")
                        .WithMany("SurveyBatches")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("SurveyBatches")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany("SurveyBatchesCreated")
                        .HasForeignKey("UserId");

                    b.Navigation("Channel");

                    b.Navigation("Creator");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.SurveyDelivery", b =>
                {
                    b.HasOne("Core.Entities.SurveyBatch", "Batch")
                        .WithMany("SurveyDelivery")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.DeliveryLink", "Link")
                        .WithMany("SurveyDeliveries")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Merchant", "Merchant")
                        .WithMany("SurveyDeliveries")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Link");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Core.Entities.SurveyFilters", b =>
                {
                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("SurveyFilters")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Core.Entities.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.QuestionSection", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId");

                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");

                    b.Navigation("Section");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Channel", b =>
                {
                    b.Navigation("SurveyBatches");
                });

            modelBuilder.Entity("Core.Entities.DeliveryLink", b =>
                {
                    b.Navigation("SurveyDeliveries");
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Navigation("Escalations");
                });

            modelBuilder.Entity("Core.Entities.Feedback", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Escalations");

                    b.Navigation("FeedbackTags");
                });

            modelBuilder.Entity("Core.Entities.Merchant", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SurveyDeliveries");
                });

            modelBuilder.Entity("Core.Entities.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.QuestionOption", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("TriggeredBranches");
                });

            modelBuilder.Entity("Core.Entities.QuestionSection", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.Entities.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Survey", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Permissions");

                    b.Navigation("QuestionSections");

                    b.Navigation("Questions");

                    b.Navigation("SurveyBatches");

                    b.Navigation("SurveyFilters");
                });

            modelBuilder.Entity("Core.Entities.SurveyBatch", b =>
                {
                    b.Navigation("SurveyDelivery");
                });

            modelBuilder.Entity("Core.Entities.SurveyDelivery", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Core.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ChildBranches");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Navigation("FeedbackTags");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("FeedbacksSubmitted");

                    b.Navigation("SurveyBatchesCreated");

                    b.Navigation("SurveysCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
